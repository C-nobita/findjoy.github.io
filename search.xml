<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1</title>
    <url>/findjoy.github.io/2019/10/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>设计模式：针对特定问题的简洁而优雅的解决方案 。</p>
<p>设计模式最初是静态类型语言中的设计模式，但设计模式实际上是解决某些问题的一种思想，与具体使用的语言无关。 </p>
<p>设计模式分为三种类型，共23种。创建型模式：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。行为型模式：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式(责任链模式)、访问者模式。 </p>
<p>程序设计中的主要原则：开闭原则，即 开放扩展，关闭修改单一职责原则，指一个类或者模块应该有且只有一个改变的原因高内聚低耦合，内聚性又称块内联系（模块内各元素联系的紧密性），耦合性也称块间联系（模块之间的独立性） </p>
<h5 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h5><p>工厂模式是用来创建对象的一种最常用的设计模式。在实际开发中，工厂模式主要用于复杂的对象构建、生成多个不同的实例对象等场景。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factory</span>(<span class="params">engine,speed,color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> car = &#123;&#125;; <span class="comment">//原料</span></span><br><span class="line">    car.engine = engine; <span class="comment">//加工</span></span><br><span class="line">    car.speed = speed; <span class="comment">//加工</span></span><br><span class="line">    car.color = color; <span class="comment">//加工</span></span><br><span class="line">    car.drive = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'最高时速为：'</span> + car.speed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> car; <span class="comment">//出厂</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> car1 = factory(<span class="string">'v4'</span>,<span class="string">'140km/h'</span>,<span class="string">'blue'</span>);</span><br><span class="line"><span class="keyword">var</span> car2 = factory(<span class="string">'v6'</span>,<span class="string">'180km/h'</span>,<span class="string">'red'</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> factory = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> car = &#123;</span><br><span class="line">        carA: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.type = <span class="string">'高配版'</span>;</span><br><span class="line">            <span class="keyword">this</span>.engine = <span class="string">'v8引擎'</span>;</span><br><span class="line">            <span class="keyword">this</span>.speed = <span class="string">'最高时速320km/h'</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        carB: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.type = <span class="string">'中配版'</span>;</span><br><span class="line">            <span class="keyword">this</span>.engine = <span class="string">'v6引擎'</span>;</span><br><span class="line">            <span class="keyword">this</span>.speed = <span class="string">'最高时速220km/h'</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        carC: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.type = <span class="string">'低配版'</span>;</span><br><span class="line">            <span class="keyword">this</span>.engine = <span class="string">'v4引擎'</span>;</span><br><span class="line">            <span class="keyword">this</span>.speed = <span class="string">'最高时速180km/h'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">config</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> car[config]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> car1 = factory(<span class="string">'carA'</span>);</span><br><span class="line"><span class="keyword">var</span> car2 = factory(<span class="string">'carB'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car1.type);</span><br><span class="line"><span class="built_in">console</span>.log(car2.type);</span><br></pre></td></tr></table></figure>

<h5 id="单例-体-模式"><a href="#单例-体-模式" class="headerlink" title="单例(体)模式"></a>单例(体)模式</h5><p>单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">面试题：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在函数中添加代码，使下面的运行结果成立</span></span><br><span class="line">    <span class="keyword">if</span>(Fun.holder)&#123;</span><br><span class="line">        <span class="keyword">return</span> Fun.holder; <span class="comment">//保存第一次实例 并且一直用第一次得实例对象实现单点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Fun.holder = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Fun();</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Fun();</span><br><span class="line"><span class="built_in">console</span>.log(obj1 === obj2); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.attr); <span class="comment">// 'hello world'</span></span><br></pre></td></tr></table></figure>

<p>单例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单例登录窗口</span></span><br><span class="line"><span class="keyword">var</span> singleLogin = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    <span class="keyword">var</span> CreateLogin = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance) &#123;<span class="comment">//单例逻辑</span></span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">        <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    CreateLogin.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> login = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        login.classList.add(<span class="string">'login'</span>);</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(login);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CreateLogin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">var</span> login1 = singleLogin();</span><br><span class="line"><span class="keyword">var</span> login2 = singleLogin();</span><br><span class="line"><span class="built_in">console</span>.log( login1===login2 ); <span class="comment">//ture</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单例逻辑与事件分离</span></span><br><span class="line"><span class="keyword">var</span> setSingle = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;<span class="comment">//管理单例逻辑</span></span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance = fn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> createLogin = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> login = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    login.classList.add(<span class="string">'login'</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(login);</span><br><span class="line">    <span class="keyword">return</span> login;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getSingle = setSingle(createLogin)</span><br><span class="line"><span class="built_in">console</span>.log( getSingle()===getSingle() )<span class="comment">//ture</span></span><br></pre></td></tr></table></figure>

<h5 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h5><p>代理模式是为一个对象提供一个代理，以便控制对它的访问。 </p>
<p>代理模式分成两个部分，一个部分是本体，即为你想要实现的功能；另一部分为代理，代理可以代替本体做一些处理 </p>
<p>不用代理模式： </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//boy -&gt; girl</span></span><br><span class="line"><span class="keyword">var</span> Gift = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> boy = &#123;</span><br><span class="line">    send: <span class="function"><span class="keyword">function</span>(<span class="params">target,thing</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> gift = <span class="keyword">new</span> Gift(thing);</span><br><span class="line">        target.recive(gift);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> girl = &#123;</span><br><span class="line">    recive:<span class="function"><span class="keyword">function</span>(<span class="params">thing</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(thing.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">boy.send(girl,<span class="string">'cat'</span>)<span class="comment">//girl console.log(cat)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//boy -&gt; someone -&gt; girl</span></span><br><span class="line"><span class="keyword">var</span> Gift = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> boy = &#123;</span><br><span class="line">    send: <span class="function"><span class="keyword">function</span> (<span class="params">target, thing</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> gift = <span class="keyword">new</span> Gift(thing);</span><br><span class="line">        target.recive(gift);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> someone = &#123;</span><br><span class="line">    recive: <span class="function"><span class="keyword">function</span> (<span class="params">thing</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.send(thing.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    send: <span class="function"><span class="keyword">function</span> (<span class="params">thing</span>) </span>&#123;</span><br><span class="line">        girl.recive(thing);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> girl = &#123;</span><br><span class="line">    recive: <span class="function"><span class="keyword">function</span> (<span class="params">thing</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(thing)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">boy.send(someone, <span class="string">'cat'</span>)<span class="comment">//girl console.log(cat)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//boy -&gt; someone /send or not? -&gt; girl</span></span><br><span class="line"><span class="keyword">var</span> Gift = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> boy = &#123;</span><br><span class="line">    send: <span class="function"><span class="keyword">function</span> (<span class="params">target, thing</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> gift = <span class="keyword">new</span> Gift(thing);</span><br><span class="line">        target.recive(gift);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> someone = &#123;</span><br><span class="line">    recive: <span class="function"><span class="keyword">function</span> (<span class="params">thing</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.send(thing.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    send: <span class="function"><span class="keyword">function</span> (<span class="params">thing</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//判断事件是否发送</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="comment">//适合发送)&#123;</span></span><br><span class="line">            girl.recive(thing);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> girl = &#123;</span><br><span class="line">    recive: <span class="function"><span class="keyword">function</span> (<span class="params">thing</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(thing)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">boy.send(someone, <span class="string">'cat'</span>)<span class="comment">//girl console.log(cat)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代理模式预加载</span></span><br><span class="line"><span class="keyword">var</span> myImg = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(img);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">address</span>) </span>&#123;</span><br><span class="line">        img.src = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        myImg(img.src);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setSrc: <span class="function"><span class="keyword">function</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line">            myImg(<span class="string">'loading.gif'</span>);</span><br><span class="line">            img.src = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br><span class="line">proxyImage.setSrc(<span class="string">'http://pic39.photophoto.cn/20160411/1155116845138548_b.jpg'</span>);</span><br></pre></td></tr></table></figure>

<h5 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h5><p>策略模式的定义是：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。一个基于策略模式的程序至少由两部分组成： </p>
<p>第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程；第二个部分是环境类Context，Context接受客户的请求，随后把请求委托给某个策略类。’算法’：各种业务规则 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//demo1：计算奖金，基于传统面向对象语言的模仿</span></span><br><span class="line"> <span class="keyword">var</span> performanceA = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">performanceA.prototype.calculate = <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> performanceB = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">performanceB.prototype.calculate = <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> performanceC = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">performanceC.prototype.calculate = <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Bonus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.salary = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.strategy = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Bonus.prototype.setsalary = <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line">Bonus.prototype.setstrategy = <span class="function"><span class="keyword">function</span> (<span class="params">strategy</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">&#125;</span><br><span class="line">Bonus.prototype.getBonus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.strategy.calculate(<span class="keyword">this</span>.salary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bonus1 = <span class="keyword">new</span> Bonus();</span><br><span class="line">bonus1.setsalary(<span class="number">12000</span>);</span><br><span class="line">bonus1.setstrategy(<span class="keyword">new</span> performanceA);</span><br><span class="line"><span class="built_in">console</span>.log(bonus1.getBonus())</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//demo2：JavaScript版本的策略模式</span></span><br><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line"><span class="string">'A'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">8</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">'B'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">5</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">'C'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span> (<span class="params">level, salary</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> strategies[level](salary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(calculateBonus(<span class="string">'A'</span>, <span class="number">10000</span>)); <span class="comment">//80000</span></span><br><span class="line"><span class="built_in">console</span>.log(calculateBonus(<span class="string">'B'</span>, <span class="number">10000</span>)); <span class="comment">//50000</span></span><br></pre></td></tr></table></figure>

<h5 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h5><p>观察者模式（发布-订阅模式），它定义对象间的一种 一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。 </p>
<p>在JavaScript开发中，我们一般用事件模型来替代传统的发布-订阅模式。最常用且最简单的发布-订阅模式：DOM事件 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'消息'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>订阅document.body上的click事件，当body节点被点击时，body节点便会向订阅者发布这个消息 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发布-订阅模式的一个应用场景：售楼处(发布者)给意愿购房者(订阅者)发消息</span></span><br><span class="line"><span class="keyword">var</span> saleOffice = &#123; <span class="comment">//售楼处</span></span><br><span class="line">    clientList: &#123;&#125;, <span class="comment">//缓存列表，存放订阅者的回调函数</span></span><br><span class="line">    addlisten: <span class="function"><span class="keyword">function</span> (<span class="params">key,fn</span>) </span>&#123; <span class="comment">//添加订阅者</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.clientList[key]) &#123; <span class="comment">//未订阅过此类消息，创建一个缓存列表</span></span><br><span class="line">            <span class="keyword">this</span>.clientList[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.clientList[key].push(fn); <span class="comment">//订阅的消息添加进消息缓存列表</span></span><br><span class="line">    &#125;,</span><br><span class="line">    trigger: <span class="function"><span class="keyword">function</span> (<span class="params">key,msg</span>) </span>&#123; <span class="comment">//发布消息方法</span></span><br><span class="line">        <span class="keyword">var</span> fnArr = <span class="keyword">this</span>.clientList[key]; <span class="comment">//取出该消息对应的回调函数集合</span></span><br><span class="line">        <span class="keyword">if</span> (!fnArr || fnArr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果未订阅该消息，则返回</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fnArr.length; i++) &#123;</span><br><span class="line">            fnArr[i](msg); <span class="comment">//执行所有回调函数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">saleOffice.addlisten(<span class="string">'houseTypeA'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123; <span class="comment">//订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'尊敬的客户，您关注房源信息为：'</span> + msg);</span><br><span class="line">&#125;);</span><br><span class="line">saleOffice.addlisten(<span class="string">'houseTypeB'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123; <span class="comment">//订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'尊敬的客户，您关注房源信息为：'</span> + msg);</span><br><span class="line">&#125;);</span><br><span class="line">saleOffice.trigger(<span class="string">'houseTypeA'</span>,<span class="string">'户型A，12000/m，建筑面积90平米。'</span>); <span class="comment">//发布消息</span></span><br><span class="line">saleOffice.trigger(<span class="string">'houseTypeB'</span>,<span class="string">'户型B，12800/m，建筑面积120平米。'</span>); <span class="comment">//发布消息</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>-开发 -设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo blog搭建</title>
    <url>/findjoy.github.io/2019/10/25/Hexo%20blog%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="Hexo-blog搭建"><a href="#Hexo-blog搭建" class="headerlink" title="Hexo blog搭建"></a>Hexo blog搭建</h3><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>（安装前提，在安装hexo之前先安装一下两个程序）</p>
<p>安装 Hexo 相当简单，只需要先安装下列应用程序即可 </p>
<ul>
<li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> (Node.js 版本需不低于 8.6，建议使用 Node.js 10.0 及以上版本)</li>
<li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></li>
</ul>
<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。 </p>
<p>在你本地想要的地方新建文件夹（文件夹名字命名你想要的名字 比如: Blog 随意）</p>
<p>在新建的文件夹下，右键Git Bash Here 输入<code>$ npm install -g hexo-cli</code></p>
<p>此时你已经成功的安装了所需要的软件。</p>
<h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>terminal中输入 <code>$ hexo init</code> 等待初始化</p>
<p>初始化完成之后 执行  <code>$ npm install</code></p>
<p>执行完成之后 执行  <code>$ npm install hexo-server –save</code> 用于安装hexo-server以便于本地查看（调试）博客 </p>
<p>安装完成 输入 <code>$ hexo server</code></p>
<p>出现提示信息  Hexo is running at <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> . Press Ctrl+C to stop. 就说明成功，访问连接可以看到hexo初始主题样式。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--more--&gt;</span></span></span><br></pre></td></tr></table></figure>

<h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><p>部署到 Coding 或者Github上 （两者方法一样）</p>
<p>安装deployer才能将本地代码部署到云端</p>
<p><code>$ npm install hexo-deployer-git --save</code></p>
<h6 id="Githubpages"><a href="#Githubpages" class="headerlink" title="Githubpages"></a>Githubpages</h6><ol>
<li>创建<a href="https://github.com/" target="_blank" rel="noopener">Github</a>账号</li>
<li>创建仓库， 仓库名为：&lt;Github账号名称&gt;.github.io 并且设置为public</li>
<li>修改<code>_config.yml</code>（在站点目录下）。文件末尾修改为：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>接下来推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>  等待1分钟左右，浏览器访问网址： <code>https://&lt;Github账号名称&gt;.github.io</code> </p>
<p>  至此，您的Hexo博客已经搭建在GithubPages, 域名为<code>https://&lt;Github账号名称&gt;.github.io</code>。 </p>
<h6 id="GithubPages-域名"><a href="#GithubPages-域名" class="headerlink" title="GithubPages + 域名"></a>GithubPages + 域名</h6><p>在方案一的基础上，添加自定义域名（您购买的域名）。</p>
<ol>
<li><p>域名解析。</p>
<p>类型选择为 CNAME；</p>
<p>主机记录即域名前缀，填写为www；</p>
<p>记录值填写为&lt;Github账号名称&gt;.github.io；</p>
<p>解析线路，TTL 默认即可。</p>
</li>
<li><p>仓库设置。</p>
<p>2.1. 打开博客仓库设置：<code>https://github.com/&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io/settings</code></p>
<p>2.2. 在Custom domain下，填写自定义域名，点击<code>save</code>。</p>
<p>2.3. 在站点目录的<code>source</code>文件夹下，创建并打开<code>CNAME.txt</code>，写入你的域名（如<code>www.simon96.online</code>），保存，并重命名为<code>CNAME</code>。</p>
</li>
<li><p>等待10分钟左右。</p>
<p>浏览器访问自定义域名。</p>
<p>至此，您的Hexo博客已经解析到自定义域名，<code>https://&lt;Github账号名称&gt;.github.io</code>依然可用。</p>
</li>
</ol>
<h6 id="GithubPages-CodingPages-域名"><a href="#GithubPages-CodingPages-域名" class="headerlink" title="GithubPages + CodingPages + 域名"></a>GithubPages + CodingPages + 域名</h6><p>GithubPages 在国内较慢，百度不收录，而CodingPages 在国外较快。所以在方案二的基础上，添加CodingPages 。</p>
<ol>
<li><p>创建<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>账号</p>
</li>
<li><p>创建仓库， 仓库名为：&lt;Coding账号名称&gt;</p>
</li>
<li><p>进入项目里『代码』页面，点击『一键开启静态 Pages』，稍等片刻CodingPages即可部署成功。</p>
</li>
<li><p>将本地Hexo博客推送到CodingPages</p>
<p>4.1. 鉴于创建GithubPages 时，已经生成过公钥。可直接复制密钥文件内容（路径形如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>）， 粘贴到<a href="https://dev.tencent.com/user/account/setting/keys" target="_blank" rel="noopener">新增公钥</a>。</p>
<p>4.2. 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@git.coding.net</span><br><span class="line">$ yes</span><br></pre></td></tr></table></figure>

<p>4.3. 修改<code>_config.yml</code>（在存放Hexo初始化文件的路径下）。文件末尾修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">- type: git</span><br><span class="line">  repo: git@git.dev.tencent.com:&lt;Coding账号名称&gt;/&lt;Coding账号名称&gt;.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
</li>
<li><p>域名解析</p>
<ol>
<li><p>添加 CNAME 记录指向 &lt;Coding账号名称&gt;.coding.me</p>
<p>类型选择为 CNAME；</p>
<p>主机记录即域名前缀，填写为www；</p>
<p>记录值填写为&lt;Github账号名称&gt;.coding.me；</p>
<p>解析线路，TTL 默认即可。</p>
</li>
<li><p>添加 两条A 记录指向 192.30.252.153和192.30.252.154</p>
<p>类型选择为 A；</p>
<p>主机记录即域名前缀，填写为@；</p>
<p>记录值填写为192.30.252.153和192.30.252.154；</p>
<p>解析线路，境外或谷歌。</p>
</li>
<li><p>在『Pages 服务』设置页（<code>https://dev.tencent.com/u/&lt;Coding账号名称&gt;/p/&lt;Coding账号名称&gt;/git/pages/settings</code>）中绑定自定义域名。</p>
</li>
</ol>
</li>
</ol>
<p>至此，您的Hexo博客已经解析到自定义域名，<code>https://&lt;Github账号名称&gt;.github.io</code>和<code>https://&lt;Coding账号名称&gt;.coding.me</code>依然可用。</p>
<h5 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h5><h6 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h6><p>Hexo默认的主题是landscape 可以在github上找其他主题 <a href="https://github.com/search?q=hexo-theme" target="_blank" rel="noopener">https://github.com/search?q=hexo-theme</a> </p>
<h6 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h6><ol>
<li>下载主题</li>
<li>将下载好的主题文件夹，粘贴到站点目录的<code>themes</code>下。</li>
<li>更改站点配置文件<code>_config.yml</code> 的theme字段，为主题文件夹的名称：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: &lt;主题文件夹的名称&gt;</span><br></pre></td></tr></table></figure>



<h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>出现在本地可以完整的看到blog</p>
<p>但是上传到github上的时候 出现无法加载css、js等文件，则在你的根目录的配置文件_config.yml中把</p>
<p>url: //换成你的地址</p>
<p>root: //换成你的仓库名</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
