<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>nodeJS入门</title>
    <url>/2019/10/29/nodeJS%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h3 id="nodeJS入门"><a href="#nodeJS入门" class="headerlink" title="nodeJS入门"></a>nodeJS入门</h3><h5 id="nodeJS简介"><a href="#nodeJS简介" class="headerlink" title="nodeJS简介"></a>nodeJS简介</h5><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。 </p>
<p>简单的说 Node.js 就是运行在服务端的 JavaScript。 </p>
<p>node.js特点 ：</p>
<p>单线程 </p>
<p>非阻塞 I/O（异步） </p>
<p>事件驱动 </p>
<h5 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h5><p>NPM是随同NodeJS一起安装的包管理工具，包的结构使您能够轻松跟踪依赖项和版本。 </p>
<p>NPM能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>
<p>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</p>
<p>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</p>
<p>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。 </p>
<p>生成 package.json 配置文件 </p>
<p><code>$ npm init</code></p>
<p><code>$ npm init -y  //跳过所有提问</code></p>
<h6 id="安装包"><a href="#安装包" class="headerlink" title="安装包"></a>安装包</h6><p>本地安装（当前项目能访问到）</p>
<p><code>$ npm install 包名</code></p>
<p>全局安装（其他项目都能访问到）</p>
<p><code>$ npm install 包名 -global</code></p>
<p>缩写形式</p>
<p><code>$ npm i 包名 -g</code></p>
<p>项目依赖（添加到dependencies）</p>
<p><code>$ npm install 包名 -save</code> </p>
<p>项目上线需要用到的包，缩写<code>$ npm install 包名 -S (大写)</code></p>
<p> 开发依赖（添加到devDependencies） </p>
<p><code>$ npm install 包名 --save-dev</code></p>
<p>开发测试需要用到的包，缩写<code>npm install 包名 -D (大写)</code></p>
<p>移除依赖模块 </p>
<p><code>$ npm uninstall 包名 -save</code></p>
<p><code>$ npm uninstall 包名 --save-dev</code></p>
<p>清除缓存数据 </p>
<p><code>npm cache verify</code>  如报错 -4048 时使用 </p>
<p>在package.json 中</p>
<p>“scripts” 字段定义脚本命令</p>
<p>“start”: “node jsonp.js”  </p>
<p><code>npm run start</code>等同于 <code>node jsonp.js</code></p>
<h5 id="编写nodeJS"><a href="#编写nodeJS" class="headerlink" title="编写nodeJS"></a>编写nodeJS</h5><h6 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h6><p>在window命令行环境中输入指令node并回车，进行node的交互式环境,编写javascript代码执行即可。其中node交互式环境也称之为REPL(Read Eval Print Loop-读取评估打印循环 )，按两次ctrl+c,可退出REPL环境。 </p>
<p>先输入node指令，进入node的交互式环境，再输入js代码。 </p>
<h6 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h6><p>把javascript代码写在后缀为.js的文件中 </p>
<p>如有一个hello.js文件，在window命令行中输入node hello.js即可执行。 </p>
<p>注：在浏览器环境中全局对象是window，在node环境中全局对象变为global </p>
<h5 id="搭建web服务器"><a href="#搭建web服务器" class="headerlink" title="搭建web服务器"></a>搭建web服务器</h5><p>步骤：    </p>
<ol>
<li>加载http模块   </li>
<li>创建http服务    </li>
<li>服务端对象监听request 请求事件，用于监听客户端的请求   </li>
<li>启动http服务，监听端口 </li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//示例：</span></span><br><span class="line"><span class="comment">//加载http模块 </span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="comment">//创建http服务 </span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="comment">//服务对象监听request 请求事件，用于监听客户端的请求</span></span><br><span class="line">server.on(<span class="string">'request'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//req-请求对象 , res-响应对象</span></span><br><span class="line">  <span class="comment">//处理客户端请求逻辑</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'收到请求: '</span>+ req.url); <span class="comment">//用户请求地址</span></span><br><span class="line">  res.end(); <span class="comment">//必须结束响应，否则浏览器会被挂起</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//启动http服务，开始监听3000端口</span></span><br><span class="line">server.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'服务已经启动，请访问： http://localhost:3000 或 http://127.0.0.1:3000'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>注意： </p>
<ol>
<li><p>在监听request事件中，最后一定要res.end()结束响应。 </p>
</li>
<li><p>浏览器显示中文可能是乱码，需设置响应头告诉浏览器显示时所使用的编码，要在res.end()之前设置</p>
<p>res.setHeader(“Content-type”,”text/plain;charset=utf-8”); // 响应为纯文本</p>
<p>res.setHeader(“Content-type”,”text/html;charset=utf-8”);  //响应为html文本 </p>
<p>设置响应头、状态码、响应类型及编码res.writeHead(200,{‘Content-type’:’text/html;charset=utf-8’}); </p>
<p>(三者之一)</p>
</li>
</ol>
<h5 id="nodeJSd读写文件"><a href="#nodeJSd读写文件" class="headerlink" title="nodeJSd读写文件"></a>nodeJSd读写文件</h5><p>读文件：fs.readFile(file[, options], callback)    </p>
<ul>
<li>参数1：要读取的文件路径，必填。    </li>
<li>参数2：读取文件时的选项，比如：文件编码utf8。选填。   </li>
<li>参数3：文件读取完毕后的回调函数，必填。 </li>
</ul>
<p>读文件注意：    </p>
<ul>
<li><p>该操作采用异步执行    </p>
</li>
<li><p>回调函数有两个参数，分别是err和data    </p>
</li>
<li><p>如果读取文件时没有指定编码，返回的是二进制数据，如指定编码utf8，会返回指定的编码数据。   </p>
</li>
<li><p>只要异步操作，回调函数第一个都是错误对象err优先 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 读文件：fs.readFile(file[, options], callback)</span></span><br><span class="line"><span class="comment">//     * 参数1：要读取的文件路径，必填。</span></span><br><span class="line"><span class="comment">//     * 参数2：读取文件时的选项，比如：文件编码utf8。选填。</span></span><br><span class="line"><span class="comment">//     * 参数3：文件读取完毕后的回调函数，必填。</span></span><br><span class="line">fs.readFile(<span class="string">'./data/write_read.txt'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>写文件：fs.writeFile(file, data[, options], callback);    </p>
<ul>
<li>参数1：要写入的文件路径，必填。    </li>
<li>参数2：要写入的数据，必填。    </li>
<li>参数3：写入文件时的选项，比如：文件编码。    </li>
<li>参数4：文件写入完毕后的回调函数，必填。 </li>
</ul>
<p>写文件注意：    </p>
<ul>
<li><p>该操作采用异步执行    </p>
</li>
<li><p>如果文件存在则替换原内容    </p>
</li>
<li><p>默认写入的文件编码为utf8    </p>
</li>
<li><p>回调函数有1个参数：err，表示在写入文件的操作过程中是否出错了。    </p>
</li>
<li><p>如果出错了err != null，成功时 err === null    * 写入文件（文件不存在则自动创建）</p>
</li>
<li><p>writeFile写入文件是先把文件内容清空再写入，如果要追加写入的话可以使用appendFile函数 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 写文件：fs.writeFile(file, data[, options], callback);</span></span><br><span class="line"><span class="comment">//     * 参数1：要写入的文件路径，必填。</span></span><br><span class="line"><span class="comment">//     * 参数2：要写入的数据，必填。</span></span><br><span class="line"><span class="comment">//     * 参数3：写入文件时的选项，比如：文件编码。</span></span><br><span class="line"><span class="comment">//     * 参数4：文件写入完毕后的回调函数，必填。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//writeFile写入文件是先把文件内容清空再写入</span></span><br><span class="line"><span class="comment">//使用appendFile是追加写入</span></span><br><span class="line"><span class="comment">// fs.writeFile('./data/write.txt','this is a test!','utf8',function(err)&#123;</span></span><br><span class="line"><span class="comment">//     if(!err)&#123;</span></span><br><span class="line"><span class="comment">//         console.log("写入数据完成");</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line">fs.appendFile(<span class="string">'./data/write_read.txt'</span>,<span class="string">'this is a test!'</span>,<span class="string">'utf8'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"写入数据完成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>其他常用模块： </p>
<p>path模块 提供用于处理文件路径和目录路径的实用工具。 </p>
<p>url模块 用于处理与解析 URL。 </p>
<p> querystring 模块 提供用于解析和格式化 URL 查询字符串的实用工具。 </p>
<p> 本地服务器 </p>
<p><code>npm i http-server -g</code>  -g为global 全局 在nodeJS中的全局为global</p>
<p>cmd 进入当前目录  运行  http-server </p>
<h5 id="CommonJS模块化规范"><a href="#CommonJS模块化规范" class="headerlink" title="CommonJS模块化规范"></a>CommonJS模块化规范</h5><p>node应用由模块组成，采用的commonjs模块规范。 </p>
<p>每一个文件就是一个模块，拥有自己独立的作用域，变量，以及方法等，对其他的模块都不可见。 </p>
<p>加载某个模块，其实是加载该模块的module.exports属性，require方法用于加载模块。 </p>
<p>CommonJS模块的特点： </p>
<p>所有代码都运行在模块作用域，不会污染全局作用域。</p>
<p>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。 </p>
<p>加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。 </p>
<p>模块加载的顺序，按照其在代码中出现的顺序。 </p>
<h5 id="module对象"><a href="#module对象" class="headerlink" title="module对象"></a>module对象</h5><p>CommonJS规范规定，每个模块内部，module变量代表当前模块。 </p>
<p>这个变量是一个对象，它的exports属性（即module.exports）是对外的接口。 </p>
<p>module.exports属性表示当前模块对外输出的接口，其他文件加载该模块，实际上就是读取 </p>
<h5 id="exports变量"><a href="#exports变量" class="headerlink" title="exports变量"></a>exports变量</h5><p>node为每一个模块提供了一个exports变量(可以说是一个对象)，指向 module.exports。 这相当于每个模块中都有一句这样的命令 var exports = module.exports;这样，在对外输出时，可以在这个变量上添加方法。 </p>
<p>注意：不能把exports直接指向一个值，这样就相当于切断了 exports 和module.exports 的关系。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**********************************/</span></span><br><span class="line"><span class="comment">// exports = fn;</span></span><br><span class="line"><span class="comment">// exports =  writeStream;</span></span><br><span class="line"><span class="comment">//不可以让exports指向一个值</span></span><br><span class="line"><span class="comment">//即为 不可给exports赋值</span></span><br><span class="line"><span class="comment">/**********************************/</span></span><br><span class="line"><span class="comment">//以下方式都ok</span></span><br><span class="line"><span class="comment">// module.exports = &#123; readStream, fn &#125;;</span></span><br><span class="line"><span class="comment">//exports.fn = fn;</span></span><br><span class="line"><span class="comment">//exports.writeStream = writeStream;</span></span><br><span class="line"><span class="comment">//module.exports = &#123;</span></span><br><span class="line"><span class="comment">//    writeStream: writeStream,</span></span><br><span class="line"><span class="comment">//    fn: fn,</span></span><br><span class="line"><span class="comment">//&#125;;</span></span><br></pre></td></tr></table></figure>

<h5 id="require方法"><a href="#require方法" class="headerlink" title="require方法"></a>require方法</h5><p>require方法用于加载模块文件，相当于读入并执行一个js文件，然后返回该模块的exports对象，没有发现指定模块，则就会报错。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> example = <span class="built_in">require</span>(<span class="string">'./example.js'</span>);</span><br></pre></td></tr></table></figure>

<h5 id="nodeJS流"><a href="#nodeJS流" class="headerlink" title="nodeJS流"></a>nodeJS流</h5><p>将一个文件的内容通过pipe写入另一个文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">|--main.js</span><br><span class="line"><span class="keyword">let</span> reader = <span class="built_in">require</span>(<span class="string">'./read'</span>);</span><br><span class="line"><span class="keyword">let</span> writer = <span class="built_in">require</span>(<span class="string">'./write'</span>);</span><br><span class="line">reader.fn();</span><br><span class="line">writer.fn();</span><br><span class="line">reader.readStream.pipe(writer.writeStream);<span class="comment">// 读取a.txt，通过管道写入b.txt</span></span><br><span class="line"></span><br><span class="line">|--read.js</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> readStream = fs.createReadStream(<span class="string">'./a.txt'</span>);<span class="comment">// 创建一个可读流</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建一个可读流'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;readStream, fn&#125;;</span><br><span class="line"></span><br><span class="line">|--write.js</span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">let</span> writeStream = fs.createWriteStream(<span class="string">'./b.txt'</span>,&#123;<span class="attr">flags</span>: <span class="string">'a'</span>&#125;);<span class="comment">// 创建一个可写流</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'创建一个可写流'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;writeStream,fn&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="ES6-模块与-CommonJS-模块的差异"><a href="#ES6-模块与-CommonJS-模块的差异" class="headerlink" title="ES6 模块与 CommonJS 模块的差异"></a>ES6 模块与 CommonJS 模块的差异</h5><p> ES6 模块与 CommonJS 模块完全不同，它们有两个重大差异。 </p>
<p> 第一个差异： </p>
<p>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</p>
<p>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。 </p>
<p>第二个差异： </p>
<p>因为 CommonJS 加载的是一个对象（即module.exports属性），该对象只有在脚本运行完才会生成。</p>
<p>而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  counter: counter,</span><br><span class="line">  incCounter: incCounter,</span><br><span class="line">&#125;;</span><br><span class="line">上面代码输出内部变量counter和改写这个变量的内部方法incCounter。然后，在main.js里面加载这个模块。</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">var</span> mod = <span class="built_in">require</span>(<span class="string">'./lib'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(mod.counter);  <span class="comment">// 3</span></span><br><span class="line">mod.incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(mod.counter); <span class="comment">// 3</span></span><br><span class="line">上面代码说明，lib.js模块加载以后，它的内部变化就影响不到输出的mod.counter了。这是因为mod.counter是一个原始类型的值，会被缓存。除非写成一个函数，才能得到内部变动后的值。</span><br><span class="line"></span><br><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">incCounter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  counter++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="keyword">get</span> counter() &#123;</span><br><span class="line">    <span class="keyword">return</span> counter</span><br><span class="line">  &#125;,</span><br><span class="line">  incCounter: incCounter,</span><br><span class="line">&#125;;</span><br><span class="line">上面代码中，输出的counter属性实际上是一个取值器函数。现在再执行main.js，就可以正确读取内部变量counter的变动了。</span><br><span class="line"></span><br><span class="line">$ node main.js</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>-nodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>模块化</title>
    <url>/2019/10/29/%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
    <content><![CDATA[<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h5 id="ES6-module"><a href="#ES6-module" class="headerlink" title="ES6 module"></a>ES6 module</h5><p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD  两种。前者用于服务器，后者用于浏览器。 </p>
<p>设置浏览器启用es6语法功能：（Chrome 61+，Firefox 54+）1.在浏览器的url中输入：<a href="chrome://flags/" target="_blank" rel="noopener">chrome://flags/</a>2.搜索 JavaScript 关键字3.设置选项 Experimental JavaScript 为 Enable4.重启浏览器后生效 。</p>
<p><img src="C:%5CUsers%5CNobita%5CAppData%5CLocal%5CTemp%5C1572315848839.png" alt="1572315848839"></p>
<p>script 标签里面要加 type=”module”, 这样浏览器才会把相关的代码当作ES6的module 来对待不能写“裸”路径，即使是同一层级下面的文件，也要加上 ‘./name.js’ ES6 的模块自动采用严格模式，不管你有没有在模块头部加上”use strict”。 ES6 模块功能主要由两个命令构成：export 和 import。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。 一个模块就是一个独立的文件，该文件内部的所有变量，外部无法获取。 </p>
<h5 id="export-关键字"><a href="#export-关键字" class="headerlink" title="export 关键字"></a>export 关键字</h5><p>如果你希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量。以下代码放在 module1.js 文件中 </p>
<p>// 不推荐 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> userName = <span class="string">'xiaoming'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> userSex = <span class="string">'男'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> userAge = <span class="number">27</span>;</span><br></pre></td></tr></table></figure>

<p>// 推荐 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userName = <span class="string">'xiaoming'</span>;</span><br><span class="line"><span class="keyword">var</span> userSex = <span class="string">'男'</span>;</span><br><span class="line"><span class="keyword">var</span> userAge = <span class="number">27</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; userName, userSex, userAge &#125;;</span><br></pre></td></tr></table></figure>

<p>export命令除了输出变量，还可以输出对象、函数或类（class）。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码对外输出一个函数multiply。 </p>
<p>通常情况下，export输出的变量就是本来的名字，但是可以使用as关键字重命名。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123; ... &#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  f1 <span class="keyword">as</span> test1,</span><br><span class="line">  f2 <span class="keyword">as</span> test2,</span><br><span class="line">  f2 <span class="keyword">as</span> test3</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面代码使用as关键字，重命名了函数f1和f2的对外接口。重命名后，f2可以用不同的名字输出两次。 </p>
<p>错误的写法： </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">export</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> m;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> f;</span><br></pre></td></tr></table></figure>

<p>正确的写法： </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;m&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;n <span class="keyword">as</span> m&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;f&#125;;</span><br></pre></td></tr></table></figure>

<p>export语句输出的接口，与其对应的值是动态绑定关系，即通过该接口，可以取到模块内部实时的值。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> abc = <span class="string">'123'</span>;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> abc = <span class="string">'456'</span>, <span class="number">500</span>);</span><br><span class="line"><span class="comment">//上面代码输出变量abc，值为'123'，500 毫秒之后变成'456'。</span></span><br></pre></td></tr></table></figure>

<h5 id="import-关键字"><a href="#import-关键字" class="headerlink" title="import 关键字"></a>import 关键字</h5><p>使用export命令定义了模块的对外接口以后，其他 JS 文件就可以通过import命令加载这个模块。</p>
<p>以下代码放在 test1.js 文件中 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; userName, userSex, userAge &#125; <span class="keyword">from</span> <span class="string">'./module1.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(userName);</span><br><span class="line"><span class="built_in">console</span>.log(userSex);</span><br><span class="line"><span class="built_in">console</span>.log(userAge);</span><br></pre></td></tr></table></figure>

<p>如果想为输入的变量重新取一个名字，import命令要使用as关键字，将输入的变量重命名。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; userName <span class="keyword">as</span> xm &#125; <span class="keyword">from</span> <span class="string">'./module1.js'</span>;</span><br></pre></td></tr></table></figure>

<p> import命令输入的变量都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。  </p>
<p>注意，import命令具有提升效果，会提升到整个模块的头部，首先执行。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./xxx.js'</span></span><br><span class="line">a = <span class="number">123</span>; <span class="comment">// Syntax Error : 'a' is read-only;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果a是一个对象，改写a的属性是允许的。 </span></span><br><span class="line"><span class="keyword">import</span> &#123;a&#125; <span class="keyword">from</span> <span class="string">'./xxx.js'</span></span><br><span class="line">a.foo = <span class="string">'hello'</span>; <span class="comment">// 合法操作</span></span><br></pre></td></tr></table></figure>

<p>除了指定加载某些输出值，还可以使用整体加载，即用星号（*）指定一个对象，所有输出值都加载在这个对象上面。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> obj <span class="keyword">from</span> <span class="string">'./module1.js'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.userName);</span><br><span class="line"><span class="built_in">console</span>.log(obj.userSex);</span><br><span class="line"><span class="built_in">console</span>.log(obj.userAge);</span><br></pre></td></tr></table></figure>

<h5 id="export-default-命令"><a href="#export-default-命令" class="headerlink" title="export default 命令"></a>export default 命令</h5>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>-模块化</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2019/10/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>设计模式：针对特定问题的简洁而优雅的解决方案 。</p>
<p>设计模式最初是静态类型语言中的设计模式，但设计模式实际上是解决某些问题的一种思想，与具体使用的语言无关。 </p>
<p>设计模式分为三种类型，共23种。创建型模式：单例模式、抽象工厂模式、建造者模式、工厂模式、原型模式。结构型模式：适配器模式、桥接模式、装饰模式、组合模式、外观模式、享元模式、代理模式。行为型模式：模版方法模式、命令模式、迭代器模式、观察者模式、中介者模式、备忘录模式、解释器模式、状态模式、策略模式、职责链模式(责任链模式)、访问者模式。 </p>
<p>程序设计中的主要原则：开闭原则，即 开放扩展，关闭修改单一职责原则，指一个类或者模块应该有且只有一个改变的原因高内聚低耦合，内聚性又称块内联系（模块内各元素联系的紧密性），耦合性也称块间联系（模块之间的独立性） </p>
<h5 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h5><p>工厂模式是用来创建对象的一种最常用的设计模式。在实际开发中，工厂模式主要用于复杂的对象构建、生成多个不同的实例对象等场景。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factory</span>(<span class="params">engine,speed,color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> car = &#123;&#125;; <span class="comment">//原料</span></span><br><span class="line">    car.engine = engine; <span class="comment">//加工</span></span><br><span class="line">    car.speed = speed; <span class="comment">//加工</span></span><br><span class="line">    car.color = color; <span class="comment">//加工</span></span><br><span class="line">    car.drive = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'最高时速为：'</span> + car.speed);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> car; <span class="comment">//出厂</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> car1 = factory(<span class="string">'v4'</span>,<span class="string">'140km/h'</span>,<span class="string">'blue'</span>);</span><br><span class="line"><span class="keyword">var</span> car2 = factory(<span class="string">'v6'</span>,<span class="string">'180km/h'</span>,<span class="string">'red'</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> factory = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> car = &#123;</span><br><span class="line">        carA: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.type = <span class="string">'高配版'</span>;</span><br><span class="line">            <span class="keyword">this</span>.engine = <span class="string">'v8引擎'</span>;</span><br><span class="line">            <span class="keyword">this</span>.speed = <span class="string">'最高时速320km/h'</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        carB: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.type = <span class="string">'中配版'</span>;</span><br><span class="line">            <span class="keyword">this</span>.engine = <span class="string">'v6引擎'</span>;</span><br><span class="line">            <span class="keyword">this</span>.speed = <span class="string">'最高时速220km/h'</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        carC: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.type = <span class="string">'低配版'</span>;</span><br><span class="line">            <span class="keyword">this</span>.engine = <span class="string">'v4引擎'</span>;</span><br><span class="line">            <span class="keyword">this</span>.speed = <span class="string">'最高时速180km/h'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">config</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> car[config]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> car1 = factory(<span class="string">'carA'</span>);</span><br><span class="line"><span class="keyword">var</span> car2 = factory(<span class="string">'carB'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(car1.type);</span><br><span class="line"><span class="built_in">console</span>.log(car2.type);</span><br></pre></td></tr></table></figure>

<h5 id="单例-体-模式"><a href="#单例-体-模式" class="headerlink" title="单例(体)模式"></a>单例(体)模式</h5><p>单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">面试题：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在函数中添加代码，使下面的运行结果成立</span></span><br><span class="line">    <span class="keyword">if</span>(Fun.holder)&#123;</span><br><span class="line">        <span class="keyword">return</span> Fun.holder; <span class="comment">//保存第一次实例 并且一直用第一次得实例对象实现单点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Fun.holder = <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> Fun();</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> Fun();</span><br><span class="line"><span class="built_in">console</span>.log(obj1 === obj2); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj1.attr); <span class="comment">// 'hello world'</span></span><br></pre></td></tr></table></figure>

<p>单例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单例登录窗口</span></span><br><span class="line"><span class="keyword">var</span> singleLogin = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    <span class="keyword">var</span> CreateLogin = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance) &#123;<span class="comment">//单例逻辑</span></span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">        <span class="keyword">return</span> instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    CreateLogin.prototype.init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> login = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        login.classList.add(<span class="string">'login'</span>);</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(login);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CreateLogin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">var</span> login1 = singleLogin();</span><br><span class="line"><span class="keyword">var</span> login2 = singleLogin();</span><br><span class="line"><span class="built_in">console</span>.log( login1===login2 ); <span class="comment">//ture</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单例逻辑与事件分离</span></span><br><span class="line"><span class="keyword">var</span> setSingle = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;<span class="comment">//管理单例逻辑</span></span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance = fn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> createLogin = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> login = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    login.classList.add(<span class="string">'login'</span>);</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(login);</span><br><span class="line">    <span class="keyword">return</span> login;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> getSingle = setSingle(createLogin)</span><br><span class="line"><span class="built_in">console</span>.log( getSingle()===getSingle() )<span class="comment">//ture</span></span><br></pre></td></tr></table></figure>

<h5 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h5><p>代理模式是为一个对象提供一个代理，以便控制对它的访问。 </p>
<p>代理模式分成两个部分，一个部分是本体，即为你想要实现的功能；另一部分为代理，代理可以代替本体做一些处理 </p>
<p>不用代理模式： </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//boy -&gt; girl</span></span><br><span class="line"><span class="keyword">var</span> Gift = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> boy = &#123;</span><br><span class="line">    send: <span class="function"><span class="keyword">function</span>(<span class="params">target,thing</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> gift = <span class="keyword">new</span> Gift(thing);</span><br><span class="line">        target.recive(gift);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> girl = &#123;</span><br><span class="line">    recive:<span class="function"><span class="keyword">function</span>(<span class="params">thing</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(thing.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">boy.send(girl,<span class="string">'cat'</span>)<span class="comment">//girl console.log(cat)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//boy -&gt; someone -&gt; girl</span></span><br><span class="line"><span class="keyword">var</span> Gift = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> boy = &#123;</span><br><span class="line">    send: <span class="function"><span class="keyword">function</span> (<span class="params">target, thing</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> gift = <span class="keyword">new</span> Gift(thing);</span><br><span class="line">        target.recive(gift);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> someone = &#123;</span><br><span class="line">    recive: <span class="function"><span class="keyword">function</span> (<span class="params">thing</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.send(thing.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    send: <span class="function"><span class="keyword">function</span> (<span class="params">thing</span>) </span>&#123;</span><br><span class="line">        girl.recive(thing);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> girl = &#123;</span><br><span class="line">    recive: <span class="function"><span class="keyword">function</span> (<span class="params">thing</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(thing)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">boy.send(someone, <span class="string">'cat'</span>)<span class="comment">//girl console.log(cat)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//boy -&gt; someone /send or not? -&gt; girl</span></span><br><span class="line"><span class="keyword">var</span> Gift = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> boy = &#123;</span><br><span class="line">    send: <span class="function"><span class="keyword">function</span> (<span class="params">target, thing</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> gift = <span class="keyword">new</span> Gift(thing);</span><br><span class="line">        target.recive(gift);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> someone = &#123;</span><br><span class="line">    recive: <span class="function"><span class="keyword">function</span> (<span class="params">thing</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.send(thing.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    send: <span class="function"><span class="keyword">function</span> (<span class="params">thing</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//判断事件是否发送</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="comment">//适合发送)&#123;</span></span><br><span class="line">            girl.recive(thing);</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> girl = &#123;</span><br><span class="line">    recive: <span class="function"><span class="keyword">function</span> (<span class="params">thing</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(thing)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">boy.send(someone, <span class="string">'cat'</span>)<span class="comment">//girl console.log(cat)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 代理模式预加载</span></span><br><span class="line"><span class="keyword">var</span> myImg = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(img);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">address</span>) </span>&#123;</span><br><span class="line">        img.src = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="keyword">var</span> proxyImage = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        myImg(img.src);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setSrc: <span class="function"><span class="keyword">function</span> (<span class="params">src</span>) </span>&#123;</span><br><span class="line">            myImg(<span class="string">'loading.gif'</span>);</span><br><span class="line">            img.src = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)()</span><br><span class="line">proxyImage.setSrc(<span class="string">'http://pic39.photophoto.cn/20160411/1155116845138548_b.jpg'</span>);</span><br></pre></td></tr></table></figure>

<h5 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h5><p>策略模式的定义是：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。一个基于策略模式的程序至少由两部分组成： </p>
<p>第一个部分是一组策略类，策略类封装了具体的算法，并负责具体的计算过程；第二个部分是环境类Context，Context接受客户的请求，随后把请求委托给某个策略类。’算法’：各种业务规则 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//demo1：计算奖金，基于传统面向对象语言的模仿</span></span><br><span class="line"> <span class="keyword">var</span> performanceA = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">performanceA.prototype.calculate = <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">8</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> performanceB = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">performanceB.prototype.calculate = <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> performanceC = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">performanceC.prototype.calculate = <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Bonus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.salary = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.strategy = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Bonus.prototype.setsalary = <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line">Bonus.prototype.setstrategy = <span class="function"><span class="keyword">function</span> (<span class="params">strategy</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">&#125;</span><br><span class="line">Bonus.prototype.getBonus = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.strategy.calculate(<span class="keyword">this</span>.salary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bonus1 = <span class="keyword">new</span> Bonus();</span><br><span class="line">bonus1.setsalary(<span class="number">12000</span>);</span><br><span class="line">bonus1.setstrategy(<span class="keyword">new</span> performanceA);</span><br><span class="line"><span class="built_in">console</span>.log(bonus1.getBonus())</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//demo2：JavaScript版本的策略模式</span></span><br><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line"><span class="string">'A'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">8</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">'B'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">5</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">'C'</span>: <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span> (<span class="params">level, salary</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> strategies[level](salary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(calculateBonus(<span class="string">'A'</span>, <span class="number">10000</span>)); <span class="comment">//80000</span></span><br><span class="line"><span class="built_in">console</span>.log(calculateBonus(<span class="string">'B'</span>, <span class="number">10000</span>)); <span class="comment">//50000</span></span><br></pre></td></tr></table></figure>

<h5 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h5><p>观察者模式（发布-订阅模式），它定义对象间的一种 一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。 </p>
<p>在JavaScript开发中，我们一般用事件模型来替代传统的发布-订阅模式。最常用且最简单的发布-订阅模式：DOM事件 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'消息'</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>

<p>订阅document.body上的click事件，当body节点被点击时，body节点便会向订阅者发布这个消息 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发布-订阅模式的一个应用场景：售楼处(发布者)给意愿购房者(订阅者)发消息</span></span><br><span class="line"><span class="keyword">var</span> saleOffice = &#123; <span class="comment">//售楼处</span></span><br><span class="line">    clientList: &#123;&#125;, <span class="comment">//缓存列表，存放订阅者的回调函数</span></span><br><span class="line">    addlisten: <span class="function"><span class="keyword">function</span> (<span class="params">key,fn</span>) </span>&#123; <span class="comment">//添加订阅者</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.clientList[key]) &#123; <span class="comment">//未订阅过此类消息，创建一个缓存列表</span></span><br><span class="line">            <span class="keyword">this</span>.clientList[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.clientList[key].push(fn); <span class="comment">//订阅的消息添加进消息缓存列表</span></span><br><span class="line">    &#125;,</span><br><span class="line">    trigger: <span class="function"><span class="keyword">function</span> (<span class="params">key,msg</span>) </span>&#123; <span class="comment">//发布消息方法</span></span><br><span class="line">        <span class="keyword">var</span> fnArr = <span class="keyword">this</span>.clientList[key]; <span class="comment">//取出该消息对应的回调函数集合</span></span><br><span class="line">        <span class="keyword">if</span> (!fnArr || fnArr.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果未订阅该消息，则返回</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fnArr.length; i++) &#123;</span><br><span class="line">            fnArr[i](msg); <span class="comment">//执行所有回调函数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">saleOffice.addlisten(<span class="string">'houseTypeA'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123; <span class="comment">//订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'尊敬的客户，您关注房源信息为：'</span> + msg);</span><br><span class="line">&#125;);</span><br><span class="line">saleOffice.addlisten(<span class="string">'houseTypeB'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123; <span class="comment">//订阅消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'尊敬的客户，您关注房源信息为：'</span> + msg);</span><br><span class="line">&#125;);</span><br><span class="line">saleOffice.trigger(<span class="string">'houseTypeA'</span>,<span class="string">'户型A，12000/m，建筑面积90平米。'</span>); <span class="comment">//发布消息</span></span><br><span class="line">saleOffice.trigger(<span class="string">'houseTypeB'</span>,<span class="string">'户型B，12800/m，建筑面积120平米。'</span>); <span class="comment">//发布消息</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>-开发 -设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo blog搭建</title>
    <url>/2019/10/25/Hexo%20%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="Hexo-blog搭建"><a href="#Hexo-blog搭建" class="headerlink" title="Hexo blog搭建"></a>Hexo blog搭建</h3><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>（安装前提，在安装hexo之前先安装一下两个程序）</p>
<p>安装 Hexo 相当简单，只需要先安装下列应用程序即可 </p>
<ul>
<li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> (Node.js 版本需不低于 8.6，建议使用 Node.js 10.0 及以上版本)</li>
<li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></li>
</ul>
<p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。 </p>
<p>在你本地想要的地方新建文件夹（文件夹名字命名你想要的名字 比如: Blog 随意）</p>
<p>在新建的文件夹下，右键Git Bash Here 输入<code>$ npm install -g hexo-cli</code></p>
<p>此时你已经成功的安装了所需要的软件。</p>
<h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>terminal中输入 <code>$ hexo init</code> 等待初始化</p>
<p>初始化完成之后 执行  <code>$ npm install</code></p>
<p>执行完成之后 执行  <code>$ npm install hexo-server –save</code> 用于安装hexo-server以便于本地查看（调试）博客 </p>
<p>安装完成 输入 <code>$ hexo server</code></p>
<p>出现提示信息  Hexo is running at <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> . Press Ctrl+C to stop. 就说明成功，访问连接可以看到hexo初始主题样式。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--more--&gt;</span></span></span><br></pre></td></tr></table></figure>

<h5 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h5><p>部署到 Coding 或者Github上 （两者方法一样）</p>
<p>安装deployer才能将本地代码部署到云端</p>
<p><code>$ npm install hexo-deployer-git --save</code></p>
<h6 id="Githubpages"><a href="#Githubpages" class="headerlink" title="Githubpages"></a>Githubpages</h6><ol>
<li>创建<a href="https://github.com/" target="_blank" rel="noopener">Github</a>账号</li>
<li>创建仓库， 仓库名为：&lt;Github账号名称&gt;.github.io 并且设置为public</li>
<li>修改<code>_config.yml</code>（在站点目录下）。文件末尾修改为：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>接下来推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>  等待1分钟左右，浏览器访问网址： <code>https://&lt;Github账号名称&gt;.github.io</code> </p>
<p>  至此，您的Hexo博客已经搭建在GithubPages, 域名为<code>https://&lt;Github账号名称&gt;.github.io</code>。 </p>
<h6 id="GithubPages-域名"><a href="#GithubPages-域名" class="headerlink" title="GithubPages + 域名"></a>GithubPages + 域名</h6><p>在方案一的基础上，添加自定义域名（您购买的域名）。</p>
<ol>
<li><p>域名解析。</p>
<p>类型选择为 CNAME；</p>
<p>主机记录即域名前缀，填写为www；</p>
<p>记录值填写为&lt;Github账号名称&gt;.github.io；</p>
<p>解析线路，TTL 默认即可。</p>
</li>
<li><p>仓库设置。</p>
<p>2.1. 打开博客仓库设置：<code>https://github.com/&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io/settings</code></p>
<p>2.2. 在Custom domain下，填写自定义域名，点击<code>save</code>。</p>
<p>2.3. 在站点目录的<code>source</code>文件夹下，创建并打开<code>CNAME.txt</code>，写入你的域名（如<code>www.simon96.online</code>），保存，并重命名为<code>CNAME</code>。</p>
</li>
<li><p>等待10分钟左右。</p>
<p>浏览器访问自定义域名。</p>
<p>至此，您的Hexo博客已经解析到自定义域名，<code>https://&lt;Github账号名称&gt;.github.io</code>依然可用。</p>
</li>
</ol>
<h6 id="GithubPages-CodingPages-域名"><a href="#GithubPages-CodingPages-域名" class="headerlink" title="GithubPages + CodingPages + 域名"></a>GithubPages + CodingPages + 域名</h6><p>GithubPages 在国内较慢，百度不收录，而CodingPages 在国外较快。所以在方案二的基础上，添加CodingPages 。</p>
<ol>
<li><p>创建<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a>账号</p>
</li>
<li><p>创建仓库， 仓库名为：&lt;Coding账号名称&gt;</p>
</li>
<li><p>进入项目里『代码』页面，点击『一键开启静态 Pages』，稍等片刻CodingPages即可部署成功。</p>
</li>
<li><p>将本地Hexo博客推送到CodingPages</p>
<p>4.1. 鉴于创建GithubPages 时，已经生成过公钥。可直接复制密钥文件内容（路径形如<code>C:\Users\Administrator\.ssh\id_rsa.pub</code>）， 粘贴到<a href="https://dev.tencent.com/user/account/setting/keys" target="_blank" rel="noopener">新增公钥</a>。</p>
<p>4.2. 测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@git.coding.net</span><br><span class="line">$ yes</span><br></pre></td></tr></table></figure>

<p>4.3. 修改<code>_config.yml</code>（在存放Hexo初始化文件的路径下）。文件末尾修改为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">- type: git</span><br><span class="line">  repo: git@git.dev.tencent.com:&lt;Coding账号名称&gt;/&lt;Coding账号名称&gt;.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>4.4. 推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回<code>INFO Deploy done: git</code>即成功推送：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>
</li>
<li><p>域名解析</p>
<ol>
<li><p>添加 CNAME 记录指向 &lt;Coding账号名称&gt;.coding.me</p>
<p>类型选择为 CNAME；</p>
<p>主机记录即域名前缀，填写为www；</p>
<p>记录值填写为&lt;Github账号名称&gt;.coding.me；</p>
<p>解析线路，TTL 默认即可。</p>
</li>
<li><p>添加 两条A 记录指向 192.30.252.153和192.30.252.154</p>
<p>类型选择为 A；</p>
<p>主机记录即域名前缀，填写为@；</p>
<p>记录值填写为192.30.252.153和192.30.252.154；</p>
<p>解析线路，境外或谷歌。</p>
</li>
<li><p>在『Pages 服务』设置页（<code>https://dev.tencent.com/u/&lt;Coding账号名称&gt;/p/&lt;Coding账号名称&gt;/git/pages/settings</code>）中绑定自定义域名。</p>
</li>
</ol>
</li>
</ol>
<p>至此，您的Hexo博客已经解析到自定义域名，<code>https://&lt;Github账号名称&gt;.github.io</code>和<code>https://&lt;Coding账号名称&gt;.coding.me</code>依然可用。</p>
<h5 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h5><h6 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h6><p>Hexo默认的主题是landscape 可以在github上找其他主题 <a href="https://github.com/search?q=hexo-theme" target="_blank" rel="noopener">https://github.com/search?q=hexo-theme</a> </p>
<h6 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h6><ol>
<li>下载主题</li>
<li>将下载好的主题文件夹，粘贴到站点目录的<code>themes</code>下。</li>
<li>更改站点配置文件<code>_config.yml</code> 的theme字段，为主题文件夹的名称：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: &lt;主题文件夹的名称&gt;</span><br></pre></td></tr></table></figure>



<h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>出现在本地可以完整的看到blog</p>
<p>但是上传到github上的时候 出现无法加载css、js等文件，则在你的根目录的配置文件_config.yml中把</p>
<p>url: //换成你的地址</p>
<p>root: //换成你的仓库名</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>-hexo -blog</tag>
      </tags>
  </entry>
</search>
